//Integer to IEEE Floating Point Converter (Single Precision)
//Copyright (C) Jonathan P Dawson 2013
//2013-12-12
`timescale 1ns / 1ps

module fp_int2float
  (
   input         clk,
   input         rst,

   input [31:0]  op,

   output [31:0] res
   );

   reg [2:0]     state;
   parameter get_op    = 3'd0,
             convert_0 = 3'd1,
             convert_1 = 3'd2,
             convert_2 = 3'd3,
             round     = 3'd4,
             pack      = 3'd5;

   reg [31:0]    a, z, value;
   reg [23:0]    z_m;
   reg [7:0]     z_r;
   reg [7:0]     z_e;
   reg           z_s;
   reg           guard, round_bit, sticky;

   always @(posedge clk) begin
      case(state)
        get_op: begin
           if (start) begin
              a <= op;
              state <= convert_0;
           end
        end
        convert_0: begin
           if ( a == 0 ) begin
              z_s <= 0;
              z_m <= 0;
              z_e <= -127;
              state <= pack;
           end else begin
              value <= a[31] ? -a : a;
              z_s <= a[31];
              state <= convert_1;
           end
        end
        convert_1: begin
           z_e <= 31;
           z_m <= value[31:8];
           z_r <= value[7:0];
           state <= convert_2;
        end
        convert_2: begin
           if (!z_m[23]) begin
              z_e <= z_e - 1;
              z_m <= z_m << 1;
              z_m[0] <= z_r[7];
              z_r <= z_r << 1;
           end else begin
              guard <= z_r[7];
              round_bit <= z_r[6];
              sticky <= z_r[5:0] != 0;
              state <= round;
           end
        end
        round: begin
           if (guard && (round_bit || sticky || z_m[0])) begin
              z_m <= z_m + 1;
              if (z_m == 24'hffffff) begin
                 z_e <=z_e + 1;
              end
           end
           state <= pack;
        end
        pack: begin
           z[22 : 0] <= z_m[22:0];
           z[30 : 23] <= z_e + 127;
           z[31] <= z_s;
           state <= get_op;
        end
      endcase

      if (rst) begin
         state <= get_op;
      end
   end

   assign res = z;
   assign done = (state == get_op)? 1'b1 : 1'b0;

endmodule
